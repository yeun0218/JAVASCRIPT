
참조 https://developer.mozilla.org/ko/docs/Web/JavaScript (MDN)
    위키독스 https://wikidocs.net/
        -> ai가 알려주는 javascript

자동 줄맞춤 코드 = shiht + alt + f
1.특징
    (1) 스크립트 언어 (가볍게 특정한목적으로 빨리 쉽게 배워서 사용하기 위해)
        HTML -디자인->CSS
             -프로그래밍-> JavaScript  
             (vs major 언어: c, c+, 파이썬, java - 자체적으로 프로그램 만들기 가능)
        -Java와 Javascript는 아무 상관 없어 이름만 비슷한거 livescript -> javascript로 이름 변경(NetScape회사가 그 당시 가장 유명했던java 가져와서 사용)
        -java스크립터 언어 : 웹브라우저에서만 실행 가능(별도의 컴파일러 필요없어)
        -> JQuery 출현(크로스브라우징 위해서)(자바스크립트의 단점을 극복하기 위해
            브라우저마다 다른 부분에 대한 코드를 미리 만들어 놓고 그거 가져와서 써)
    
    (2)ECMA(2015) 언어의 표준화
        JavaScript는 ECMAScript 표준을 준수하는 언어 구현체 중 하나입니다. 
        ECMAScript는 JavaScript의 표준을 정의하여 언어의 일관성을 유지하고 발전시키는 중요한 역할을 합니다. 
        지속적인 표준 업데이트를 통해 개발자들은 더 나은 도구와 기능을 사용할 수 있으며, 이를 통해 더 효율적이고 유지보수 가능한 코드를 작성할 수 있습니다.
        ECMAScript의 새로운 기능을 학습하고 활용하면 현대적인 JavaScript 개발에 큰 도움이 됩니다.
        
        ECMA스크립트(ECMAScript, 또는 ES[1])란, Ecma International이 ECMA-262 기술 규격에 따라 정의하고 있는 표준화된 스크립트 프로그래밍 언어를 말한다.
        자바스크립트를 표준화하기 위해 만들어졌다. 
        액션스크립트와 J스크립트 등 다른 구현체도 포함하고 있다.
        [2] ECMA스크립트는 웹의 클라이언트 사이드 스크립트로 많이 사용되며 Node.js를 사용한 서버 응용 프로그램 및 서비스에도 점차 많이 쓰이고 있다.
        JQuery는 ECMA6 출현 이후로 거의 안 배워도 돼(에크마6 이후로 표준화 됐으니까)

2. 사용 방법 (CSS와 동일)
    (1) inline
        - 
    (2) internal
        -
    (3) external
        - 실제로 많이 구현하는 방식
        <script src="myScript.js"></script>

3. 코드에 따른 주석 첨부 중요 
    // : 한 줄만 주석 (앞에만 쓰면 그 행 전체가 주석처리 돼)
    /* */ : 여러 줄 주석 

4. 문법 (보단 예제 많이 풀어보고 프로그램 어떻게 만들어낼지(로직) 생각하는게 더 중요)
    (1) 변수(Variable) : 변할 수 있는 값을 저장할 수 있는 임시 기억(저장) 공간 (data저장을 위한 창고)
            <->상수(constant)
        data를 어떻게 저장할 것인지에 대한
        1) 변수 선언 (~~변수를 사용하겠다 선언) 
            - var(옛날에사용), let, const
                * let : 변수(데이터를 임시로 저장할때)
                * const : 상수 (값을 변경할 수 없는) 값이 변질되지 않게 보호하기 위해 
            변수이름을 설정할때는 어떤 데이터인지 알 수 있게 의미있게 지어야 돼

        2) 변수 표기법 (하나로 통일해서 일관성있게)
            - dash case(kebab case)
                the-quick-brown-fox (꼬치 꽂아놓은 것처럼)
            - snake case (주로 HTML, CSS에서 사용)
                the_quick_brown_fox (언더바로 표기)
            - camel case (JS)
                theQuickBrownFox (첫 글자는 소문자로 시작 중간에 들어오는 애들첫문자를 대문자로)
            - pascal case (JS)
                TheQuickBrownFox (첫 글자도 대문자)

    (2) DataType (저장된 데이터가 어떤 형식인가)
        --기본형 : 직접 그 변수가 있는 위치에 값을 하나씩만 저장----
        1) String (문자열)
        2) Number
        3) Boolean : 참인지 거짓인지 결정하게 해주기 위해
        4) Undefine
        5) Null
        ---- 참조형 : 실제 값은 다른 곳에 저장, 저장된 주소를 변수에 저장----
        data가 여러개 일때 사용 
        값이 연속적으로 저장되기 때문에 시작주소만 알면 여러데이터를 한번에 사용 할 수 있어
        6) Object (객체, 큰 범주)
            여러 개의 복잡한 데이터를 간단하게 쓸 수 있게 묶어놓은 타입 
            객체를 만드는 방법은 여러가지 방법 존재
            1. let user1 = new Object();
                껍데기를 먼저 만들고 값을 만들어나가는
            2. let userA = {name : "임꺽정", age: 20};
                값을 바로 만들어 값으로 초기화 시키는 
            3. let userB = { name: "신돌석", 
                            age: "22",
                            friend: userA};
                값 안에 또다른 단체 값 불러와
        7) Array (배열, Object안에 작은범주)
            여러개의 값을 연속적으로 묶어놓은 ,나열, 값을 여러개 [값, 값, 값, ...]
            let fruit = new Array();
            []로 순서배열해서 나열
            let food = new Array("짜장면", "라면", "비빔밥");
        8) Function

    (3) Operator (연산자 어떻게 표기할 것인가)
        종류 많아 
        1) Arithmetic (산술)
            * +,-,*,/
            * ++/--
            (증가)/(감소) 연산자, 단항연산자, 전일/후일연산자
            증감연산자는 다른 식과 함께 사용하면 오류가 날 확률이 높기때문에 웬만하면 혼자 사용
        2) Compare(비교)
            < > >=
        3) Logical(논리)
            a   b       a&&b    a||b    !a     
            -------------------------------
            T   T        T       T      F
            T   F        F       T      F
            F   T        F       T      T
            F   F        F       F      T
            &&(and) : 모든 값이 참일때 참이다(직렬버전 전구) 만장일치
            ||(or) : 하나만 참이여도 참 
            !(not, ) : 값을 반대로 바꿔주는 , 번갈아가면서 무언가를 작업할 때
                *toggle : 하나의 키를 가지고 왔다갔다 할 수 있는 
        4) Assign(할당,대입,치환)

    (4) Control Statement (제어문) //순서대로 프로그램 짜기 위해  
        
        1) 조건문(if, switch)
            - 문법
            * if
                * if(조건문){
                    실행할 코드
                }
                    if(조건문) -> 조건에 맞을때만 밑에 있는 코드 실행해라
                    실행할 코드 -> 실행할 코드가 여러 줄이면 {}로 묶어줘야해 
                    => 참일때만 사용 가능
                --------------------
                * if(조건문){
                    실행할 코드
                    }
                  else{
                    실행할 코드
                    }
                -------------------다중조건문
                * if(조건문){
                    실행할 코드
                    }
                  else if(조건문){
                    실행할 코드
                    }
                  else if(조건문){
                    실행할 코드
                    }
                    ...
                  [else{
                    실행할 코드
                  }] // 더이상 실행할 코드가 없을때 생략가능

            /* 백틱(backtick, ``)을 사용하여 템플릿 리터럴을 시작하고 종료합니다.
            `${}` 구문을 사용항 문자열 내에 변수와 표현식을 삽입합니다.
            템플릿 리터럴은 여러 줄에 걸쳐 문자열을 작성할 수 있습니다 */ 

            *체크 된거 표시할때
                .checked

            * switch 
                *수식 또는 변수가 들어감 반드시 중괄호{}닫아야해
                switch(수식또는변수){
                    case 값 :
                        실행할 코드;
                        break;
                    case 값 :
                        실행할 코드;
                        break;
                    ...
                    [default :
                        실행할 코드]
                }

                -> ()안에 있는 수식이나 변수 값이 case 값과 같을 경우에 코드를 실행해라 break는 여기까지하고 끝내라
                    (무조건 '같다'라는 조건에만 사용할 수 있어)
                    default : 해당하는 조건이 없을 경우 (그 외에는) 생략가능 
            -----------------------------------------
            - 조건문의 중첩 (Nested)
                if (){
                    ...
                    if (){
                    ...
                    }
                }
                조건문 안에 조건문 포함 
                앞에 쓴 조건문이 전제조건으로 깔린 상태에서 포함된 조건문 실행
                    
        2) 반복문 (while, do-while, for) 자동화 기능
            - while 
            ()안에있는 조건문(식)이 참일 동안, 조건문이 거짓이 될 경우 끝
                while(조건){
                    실행할 코드
                }
                
            - do-while
            최소한 한번은 실행해보게
                do{
                    실행할 코드
                }while(조건);
            
            - for
            반복문의 기본구조를 모두 한번에 작성할 수 있어서 훨씬 간결하게 표현가능
                for(초기화; 조건식; 카운터){
                    실행할 코드
                }

            * 배열 데이터일 경우
            - for(변수 of 배열){
                실행할 코드
            }
            ex) const fruits = ['Apple', 'Banana', 'Mango']; //배열
                for(let cnt=0; cnt < fruit.length; cnt++)
                for(let item of fruit) -> 권장 //배열에서 데이터를 하나씩 꺼내와서 변수에 옮겨

                e6.forEach(function(arr){console.log(arr.textContent)});
            // 반복문을 함수로 사용하기 가능 arr(매개변수) 데이터 갯수만큼 반복돌아
            -> 배열 데이터가 매개변수에 전달되서 배열만큼 함수 반복
            -> foreach안에 인자값은 함수로 들어가야해(보통 무명함수 사용 한번쓸꺼니까)
                => e6.forEach(arr=>{console.log(arr.textContent)}); 
        
        3) 반복문의 강제 중지 
        //초기의 목적을 달성했으면 반복을 끝낼 수 있게
            - break : 완전 종료(중지) 
                for(cnt = 0; cnt<10; cnt++){
            if(cnt ==5 ){
                break; 
                }
            console.log(cnt);
            }
            - continue : 일시 종료(중지)

        4) 반복문의 중첩

    (5) 함수(Function)
        
        1) 함수의 종류
            - Built In Function(내장함수)//미리 만들어진거
            - User Define Function //직접만드는
            - Third Party Function //다른사람이 만들어 놓은거 불러오는

        2) 함수를 사용하는 이유
            - 재사용성(유지보수할때)을 하기 위해서 (생산성 위해)

        3) 함수 작성법(함수 선언식)
            - 함수 선언식
                * function 함수명(들어가있거나 비어있거나){//중괄호 : 코드블럭(코드를 묶어주는)
                    실행할 코드
                    }
                    ------
                    함수명(); <- 호출해서 사용(재사용 가능)

            - 함수 표현식, 무명함수(익명함수) 호출할 위치에 바로 함수 만들어(일회성)
                * function(...){
                    실행할 코드
                }
                재사용X 특정 위치에서 함수 한 번만 사용할 때, 함수도 인자값으로 받을 수 있어
                변수 = function(...){  //만약 무명함수가 또 필요할때는 변수로 지정해줘서 변수이름으로 호출해
                            실행할 코드
                        }
                -----
                변수(); 

            - 화살표 함수 (Arrow Function) //더 간결하게 쓰는
                * ()=>{ 실행할 코드 } // function 이라는 단어도 빼버리자
                -------------
                const 변수 = () => {} : 매개 변수가 없을떄에는 ()를 생략할 수 없다.(X)
                const 변수 = x => {} : 매개 변수가 1개일때에는 ()를 생략할 수 있다(O)
                const 변수 = (x,y) => {} : 매개 변수가 2개 이상일 때에는 ()를 생략할 수 없다(X)

                const 변수 = x => { return x*x}
                const 변수 = x =>  x*x : return을 생략할 때에는 {}도 같이 생략해야 한다(O)
                const 변수 = x => {
                                    console.log(x*x);
                                    return x*x;
                                    }
                                : 여러 줄일 경우에는 {} 와 return을 생략할 수 없다(X)

                const 변수 = () => {return {a : 1}}; (O)
                const 변수 = () => {a : 1}; // (X) 오류(데이터를 중괄호를 묶는건 안돼 , {}롤 묶는건 객체 표현할 때)
                const 변수 = () => ({a : 1}); // (O) ()괄호로 묶어주는 건 가능
                const 변수 = () => (return [1,2,3]);(O) Array datatype 경우
                const 변수 = () => [1,2,3]; (O)
        함수 call(호출)
            메모리에 올라가서 실행할 수 있게 준비 상태(메모리라는 공간에 차지하고 있어) 
            line이 100번지에 자리잡고있어 main함수 진행하다가 LINE함수 만나면 100번지로 가서 line 작업 진행하고 끝나면 
            다시 main함수로 돌아와서 진행  

        4) 함수 호출 방식 (인자, 매개변수)
            /인자방식 : jump할때 방식/
            - 인자(인수)가 없는 방식
                함수를 만들때 () 안에 값이 없을 때//아무것도 없이 빈손으로 건너가는 방식
            - 인자가 있는 방식 
                융통성있는 코드 사용 가능 도출하려는 값이 사용할때마다 다를때 
                main 함수에 변수가 있으면 값(실인자)도 무조건 가져가야해
            *매개변수(Parameter)
                매개변수는 함수를 정의할 때 사용하는 변수. 함수가 호출될 때, 이 변수는 함수 내부에서 사용되는 값을 나타낸다
                매개변수: 함수가 정의될 때 사용되는 변수. 예: function add(x, y) {...}
            *실인자(Argument)
                인자는 함수르 호출할 때 실제로 전달되는 값. 이 값은 함수의 매개변수에 할당됩니다.
                인자: 함수가 호출될 때 실제로 전달되는 값. 예: add(3, 5)

            함수(매개변수){
                실행할 코드
            } 
            ======
            함수 (실인자)

            /return 방식/
            - 반환값이 있는 방식
            결과값을 함수 안에서 말고 main함수에서 도출하고 싶을때  
                * return
                    값을 반환할 때 사용 (반드시 1개만 리턴 가능)
                    함수를 강제로 종료하는 기능 (다시 원위치로 다시 돌아오게하는)
    
    (6) DOM (Document Object Model)  -> document=HTML문서 object=객체(javascrpt)
        -> HTML을 javascript로 다룰 수 있게(구조가 다른 언어이기 때문에 메모리를 이용해서 HTML을 객체형식으로 메모리에 올려놔)
        -> HTML의 객체화 
        -> 프로그래밍(markup) 언어에 대해 접근할 때 도와주기 위해(서로 구조가 다르기때문에) 
        1) 특징
            - HTML 문서를 객체로 표현한 것
            - DOM API(Application Programming Interface) (프로그램을 만들때 필요한 함수모음집) / 
              -> DOM을 만들때 필요한 함수들
              : DOM에서 사용할 수 있는 여러가지 명령어(함수) 

        2) Node vs. Element
            - Node : HTML요소, 텍스트, 주석, 공백 ... 등 HTML을 이루고 있는 모든 것을 의미(가장 큰 범위)
            - Element : HTML요소 (중에서 태그)

        3) 검색(하는 방법)
            - document.getElementById() : id 속성으로 검색
            - document.getElementsByTagName() : tag명으로 검색, 똑같은 태그가 여러개 일수도 있기때문에 복수형
            ★- document.querySelector() : CSS선택자로 검색 (하나만 검색 가능) ./ # (class/id) 가상요소통해서 first/last/nth 모두 사용가능
                "button:nth-of-type(2)" (같은 태그 두번째꺼)
            - document.querySelectorAll() : CSS선택자로 검색한 모든 요소 배열로 
            -----------------------------------
            - N.parentElement : 노드(Node)의 부모 요소를 리턴
            - E.closest() // 가장 가까운 태그 찾을때
            - N.previousSibling / N.nextSibling
            - E.previousElementSibling / E.nextElementSibling
            - E.children
            - E.firstElementChild / E.lastElementChild

        4) 생성, 조회, 수정, 삭제 (CRUD)
            - create, read, update, delete

            - document.createElement( ) : 메모리에만 존재하는 새로운 HTML 요소를 생성하고 반환
                //기준이 엘리먼트
                let e_div = document.createElement("div");
            - E.prepend(), E.append() : 노드를 첫번째 혹은 마지막 자식으로 삽입(여러 개 추가 가능)
                // 만들고 나서 어디에 붙일건지 앞 or 뒤
                // 가독성위해서 E.prependChild(), E.appendChild() 많이 써
            - E.remove() : 요소 제거
            - E.insertAdjacentElement() : 대상 요소의 지정한 위치에 새로운 요소를 삽입(좀 더 정교하게)
                insertAdjacentElement('위치', 새로운 요소)
                child1.insertAdjacentElement('afterbegin', e_span1);

                *<!-- beforebegin -->
                *<div class="target">
                    <!-- afterbegin -->//컨텐츠보다 먼저
                    내용
                    <!-- beforeend -->//컨텐츠 뒤에
                 </div>
                *<!-- afterend -->
            //기준이 노드 
            - N.insertBefore(추가할 노드, 참조할 노드) : 부모노드의 자식인 참조노드의 이전 형제로 노드를 추가
                -> 누구를 기준으로 추가할꺼냐 
                let e_span3 = document.createElement("span");
                e_span3.textContent = "공부가 끝이 없넹 ㅠ";
                parent.insertBefore(e_span3, child1); 
            - N.contains(주어진 노드) : 주어진 노드가 자신을 포함한 후손인지 확인
                -> 주어진 노드가 본인(앞에 쓴 N) 자식인지 확인할 때 
            - N.textContent : 노드의 모든 텍스트를 얻거나 변경한다.

            - E.innerHTML : 요소의 모든 html내용을 하나의 문자로 가져오거나, 새로운 HTML을 지정한다.
                -> 자식이나 텍스트노드를 넣거나 꺼낼때 
            - E.dataset : 'data-' 속성값을 얻거나 지정한다.
                -> 태그 안에 'data-데이터이름' 으로 저장되서 나타나
            - E.tagName : 요소의 태그명을 반환
            - E.id : 요소의 id속성값을 얻거나 지정한다.
            - E.className : 요소의 class속성값을 얻거나 지정한다.
            - E.classList : 요소의 class속성값을 제어
            .add(), .remove(), .toggle(), .contains()
            - E.getAttribute("속성명"), E.setAttribute("속성명", "값");
            - E.hasAttribute("속성명")
            - E.removeAttribute("속성명")
            - E.style : 요소의 style속성의 css속성값을 얻거나 지정한다.
            - window.getComputedStyle() : 요소에 적용된 스타일 객체를 반환

            * JSON(JavaScript Object Notation)
                {변수:값, 변수:값, ...}
                자바스크립트에서 객체를 표현하는 방법 

    (7) 5-1.추가 함수
        1) 호이스팅(Hoisting) - 기술면접에서 자주 등장
            : 함수가 선언되어 있는 코드를 유효한 범위 내에서 제일 상위로 끌어올려서 동작하게 하는 개념
            컴파일(compile)
                : 내가 짠 코드를 컴퓨터가 알아볼 수 있게 번역하는 방법
                - compile : 전체 코드를 묶어서 한번에 바꾸는 (일괄처리방법)
                - interpreter : 한 줄씩 번역하고 실행(순서대로 위에서부터 아래로 처리) -> 바로바로 결과 확인 가능 
                             ex) 파이썬, 자바스크립(디버깅 콘솔창에서도 바로바로 코드 짤 수 있어)
        
        2) 파라미터(매개변수) : 함수가 호출될 때 넘어오는 실인자값을 중간에 받아서 (저장)처리해주는 , 함수를 만들 때 사용
            함수(매개변수){
                실행할 코드
            } 
            ======
            함수 (실인자)

            - Defalut Value
            - 객체나 배열의 구조 분해 할당(Destructuring Assignment)
                포장(묶여있는 복잡한 데이터를)을 풀어서 값을 저장해주는 
            - rest Parameter
            - 자바스크립트는 함수를 자료형으로 처리한다.(인자값으로 생각)

        3) 콜백 함수 (거꾸로 호출한다) 
            우리가 호출하는게 아니라 상대방(시스템)이 호출하는 함수
            - 함수가 실행될 때 인자로 들어가는 또 다른 함수에서 많이 사용된다. 
            // 함수를 호출할때는 ()무조건 함께 해야하는데 함수명만 호출할 때
            1. 정의 : 다른 함수에 인수로 전달되어 나중에 호출
            2. 콜백함수를 인수로 받는 함수 : 
            이 함수는 콜백 함수를 인수로 받고, 특정 조건이나 작업이 완료된 후에 콜백함수를 호출합니다.


        4) 재귀 함수 (recursive function) like for문, while문 
            내가 나를 호출해서 순환, 반복되는 함수
            function a(){
                ~~~
                a(); //또 a라는 함수 호출
            }
            ---------
            a(); 
            * 성능차이 : 반복문이 더 좋아 
                반복문은 한 메모리 안에서 반복되지만 재귀함수는 메모리를 왔다갔다 하면서 
            * 문제해결 : 재귀함수가 더 뛰어나 (알고리즘에서)

    (8) 클래스
        여러개의 함수를 묶어줄 수 있는 조금 큰 범위 (함수 모듈화)
        - 여러개의 함수 및 변수들을 묶어줄 수 있는 단위
        - 클래스(명세서) //추상적인 실제로 사용할 순 없고 
            무언가를 만들기 전에 미리 계획, 설계해두는
        -인스턴스, 객체 // 실제로 사용할 수 있게 만들어진 물건, 클래스로 설계한 메모리 공간 
        - 클래스(명세서) => 인스턴스, 객체
        함수만들던 문법을 클래스 만들때 그대로 적용
        //변수 : 데이터 저장, 함수: 데이터 처리
        
        1) 클래스와 객체(인스턴스)생성 방법 //this 나오면 클래스인거 구분
            객체명(변수이름) = function(parameter){
                this.변수 = 파라미터;
                ...
            }//-> 클래스
            //어떤 데이터를 어떻게 저장할지 설계한 
            -------------------------------------
            변수 = new 객체명(); //-> 인스턴스 (메모리에 새롭게 만들겠다)

            ==========간단한방법===========

            변수 = {키 : 값, ...} //-> 클래스 이자 인스턴스
                //따로 설계도 없이 바로 객체 생성

            ===============================
            변수 = new Object (); //->미리 공간을 만들어 놓고 그안에 설계를 따로 하는

            - this : 현재 사용중인 객체의 주소 
            객체를 만들면 주소(메모리공간)가 생긴다

        2) 표준 내장 객체 (정의 + 어떤 함수가 있고 어떤 상황에서 사용할 수 있는지)
        -> w3schools.com
        카테고리 밑에 있는 애들은 자식요소들 처럼 쓸 수 있어(상속)
            - Array
            - Date
            - Math
            - String (어떤 기능들이 있는지 찾아보기)    
            ★- Window (웹브라우저에서만 쓸 수 있는 특별한)
                브라우저 내장 객체
                *location
                    href, reload()//다른 창(페이지)으로 이동할때
                *history
                    back//웹브라우저 상 뒤로가기 버튼 
                *navigator
                ★*document
                    link
                    anchor
                    images // 바디에 있는 이미지를 배열로 묶어줘
                    layer
                    ★form
                        input
                        text
                        textarea
                        password
                        radio
                        checkbox
                        button
                        select
                        reset
                        submit
        - 상속
        a )ㄱ, ㄴ, ㄷ    
        a ) b{ㄹ, ㅁ, ㅂ}
        b ) c{ㅅ, ㅇ, ㅈ}
        c = {ㄱ~ㅈ}
    
    (9) 이벤트
        자바스크립트가 HTML을 도와줄 때 언제 도와줄지
        운영체제에서 발생할 수 있는 상황, 사건들 (마우스 클릭, 포커스, 드래그...)
        ->w3schools.com
        commom events
        Event	Description
        onchange	An HTML element has been changed
        onclick	The user clicks an HTML element
        onmouseover	The user moves the mouse over an HTML element
        onmouseout	The user moves the mouse away from an HTML element
        onkeydown	The user pushes a keyboard key
        onload	The browser has finished loading the page

        1) 3가지 구성요소(window프로그램 만들때 필요한, 그래픽이 있는 형태)
            UI -console : only 키보드이용
               -window  

            - 이벤트 소스 (사건 발생 장소) : HTML 요소(주로 input)
            - 이벤트 클래스 (어떤 사건인지) 다 만들어져 있어
                onclick, onblur, onfocus, onload, ...
                -> https://www.w3schools.com/jsref/dom_obj_event.asp
            - 이벤트 핸들러 (사건 처리)
                함수로 만들어

        2) 이벤트 등록 및 해제 (HTML을 건들이지 않고 자바스크립에서 해결하게) 메서드
            addEventListener(이벤트 클래스, 이벤트 핸들러, 캡처 타입); //3가지 인자 넣어줘야해
            removeEventListener(이벤트 클래스, 이벤트 핸들러, 캡처 타입);
            //안에 이벤트클래스 쓸때는 on접두사 빼고 

        3) 이벤트 정보 확인 : 매개변수를 통해서 확인 

        4) 버블링과 캡처링
            부모자식 요소인데 부모랑 자식이 모두 이벤트를 가지고 있을 때 발생
            : 이벤트 전파(Propagation)방식
            - 캡처링은 addEventListener의 세번째 인자인 capture 단계를 false로 지정하여 방지
            캡처링 : (이벤트의 특성) 이벤트 발생하는 곳만 발생하는 것이 아니라 부모요소 이벤트도 실행돼
                (자식요소 접근할 때 부모요소 거쳐오기 때문에)
                부모 -> 자식
                Grand~~
                Parent~~
                Child~~~
            - 버블링은 stopPropagation()를 호출하여 방지 
            버블링 : 이벤트 끝나고 다시 거슬러 올라가
                자식 -> 부모
                Chuld~~
                Parent~~
                Grand~~

        5) 기본 동작 방지 : preventDefalut()
            //원래 가지고 있던 동작을 막아야 할때 

        6) 이벤트 위임 (Delegate)
            //이벤트를 부모한테 맡겨서 대신 처리할 수 있게
            비슷한 패턴의 여러 요소에서 이벤트를 핸들링해야 하는 경우, 단일 조상 요소에서 제어하는 
            이벤트 위임을 사용할 수 있다.
            (부모 자체가 이벤트 생성되는 건 아니야)

        7) 마우스 관련 이벤트
            click, dblclick(doubleclick), mousedown(마우스 눌렀을때), mouseup(눌렀다 뗐을때)
            mouseenter(=mouseover 어디에 진입했을때), mouseleave(=mouseout 올려놨다가 치웠을때),
            contextmenu, mousemove(마우스 움직일때), wheel

            //마우스 누른 위치의 좌표 알기
            c.addEventListener("mousedown", (ev)=>{
                console.log(ev.clientX, ev.clientY);}); 

        8) 키보드 관련 이벤트
            keydown(키를 눌렀을때), keyup(키눌렀다 뗐을때), focus, blur(focus를 잃어버렸을때 마우스가 다른 곳으로 이동했을때), 
            input, 
            change(안에 내용이 바뀌었을때 이벤트, 입력하는 데이터가 발생할때마다 
            이벤트가 생기는건 맞지만 바로바로 처리하지 않고 모아뇠다가 blur 됐을때 데이터 받아 ),
            submit, reset

    (10) 모듈
        - 특정 데이터/코드들의 집합(파일)
        - js파일들끼리 데이터를 내보내기와 가져오기를 하는 방법 : export, import
        - 기본 내보내기
            export dafault 값
            -> 디폴트는 하나만 사용 가능하며 
            -> import에서 불러올때 제일 첫번째로 써줘야 되고 {}없이 쓰기
        - import에서 이름 바꾸기
            import {선언된 이름 as 바꾸고 싶은 이름}

    (11) 정규 표현식 (Regular Expression)
        //문자열을 마음대로 쓸 수 있게 도와주는 (parsing했을때), 가공할 때, 크롤링할 때
        수많은 데이터 중에 필요한 문자들을 뽑아서 쓰고 싶을 때 (하나가 아니라 일정 패턴이 있거나 ...)

        (1) 정의 : 문자열에서 특정 문자 조합을 찾기 위한 패턴 
        (2) 용도
            1) 문자 검색(Search)
            2) 검색한 문자를 대체(Replace)
            3) 문자 추출(Extract 특정문자를 뽑아서)
        (3) 패턴 표현식 (모든 언어에서 규칙은 동일하지만 표현식은 달라)
            ^ab : 줄(line) 시작에 있는 ab와 일치하는 애를 찾겠다.
            ab$ : 줄 끝에 있는 ab와 일치 /줄 마지막이 ab로 끝나는 애를 찾겠다 
            . : 임의의 한 문자와 일치하는 것을 찾겠다 (줄바꿈 문자(\n)는 제외)   
                ex) a.b=> 가운데는 아무거나 와도 상관 없지만 시작은a 끝은 b로 끝나는 
                    a.b : aab, abb, acb, adb, ...
            a|b : a 또는 b와 일치하는 것을 찾겠다.
            ab? : 하나 b가 없거나 b와 일치하는 것을 찾겠다. (?바로 앞에 있는 한글자 문자가 확실치 않을때)
                ex) a, ab (한개 있거나 아예 없는 경우)
            {n} :n개 연속 일치하는 데이터를 찾는다. (n은 임의의 숫자)
                a{3} => aaa
            {n,} : n개 이상 연속 일치하는 것을 찾겠다. (특정 한 글자만 반복되는 것이 아니라 )
                a{3,} => aaa, aaaa, aaaaa, ...
            {n,m} : n개 이상, m개 이하 연속 일치
                a{3,5} => aaa, aaaa, aaaaa
            + : 최소 1회 이상 연속 일치 = {1,}
                a+ => a,aa, aaa, ...
            * : 0회 이상 연속 일치 (포함하지 않아도 찾겠다. 범위가 더 넓어)
            [ab] : (선택을 위한) a 또는 b (a나b 둘 중 하나만 와야해, 둘 다 출력은 안돼)
                강[남북]구 => 강남구, 강북구
            [a-z] : 소문자a부터 소문자z사이의 문자 구간에 일치하는 것
            [A-Z] : 대문자
            [0-9] : 0~9까지의 숫자
            [a-zA-Z0-9]
            [가-힣] : 모음, 받침까지 합해서 맨 마지막 글자
            [^ab] : ab를 제외한 모든 문자 구간에 일치(^를 맨 앞에 사용시 제외의 뜻으로)

            \w : word(63개의 문자 : 대소문자52개 + 숫자10 + _)에 일치 단위 중 word의 약자 
                a\wb : a와 b 사이에 63개의 문자 올 수 있어
            \W : \w에 해당하지 않는 나머지 문자 모두 대체 (특수문자)
            \d : digit(숫자)에 일치 = [0-9]
            \s : space(공백), tab 등에 일치하는 것
            \S : \s에 해당하지 않는 나머지 문자와 일치
            \  : 특수기능을 해제시키는 (escape)  
                \\w => 평범한 w문자로 되돌려(\의 기능을 없애버리는) 

            (?:) : 그룹 지정할 때
            (?=) : 앞쪽(왼쪽)과 일치
            (?<=) : 뒷쪽(오른쪽)과 일치

        (4) 정규표현식 사용법
            (1) 생성자 방식 : 직접 객체를 생성해서 사용하는 방식
                new RegExp('패턴 표현식', '플래그'); //플래그 : 옵션느낌
                * 플래그
                    g : global 모든 문자와 일치, 하나의 문자열로 생각해 
                    i : ingore case 영어 대소문자 구별하지 않고 일치하는거 찾겠다.
                    m : multiline 여러 줄 일치 
                * 나중에 재사용 가능 , 선언식 확인할 수 있어서 가독성 면에서 좋아 
            (2) 리터럴 방식 : 값을 지정해서 객체를 생성하는 방식   
                * 한번만 사용하고 싶을 때   
                * /패턴 표현식/플래그 
            (3) API
                패턴표현식.test(데이터) : 일치 여부 확인(일치하는 게 있나 없나)
                문자열데이터.match(패턴 표현식) : 일치하는 문자의 배열을 반환 (문자열 메서드)
                문자열데이터.replace(패턴 표현식, 대체문자) : 일치하는 문자를 대체할 때

    (12) jQuery
        (1) 정의 : 오픈 소스 기반의 자바스크립 라이브러리 중 하나이다.
            //오픈소스 : 코드가 그대로 공개되어 있는 (무료로 사용 가능한)
                하나의 프로그램을 다양한 사람들과 함께 만드는(집단지성)
            //라이브러리 : 내가 필요한 함수나 객체들이 모아져있는 선택적으로 골라서 쓸 수 있는 
            //아직 코드 쓰는 곳이 존재하기 때문에 읽을 줄은 알아야해(새 프로젝트에서 jquery를 쓰진 않아)
            웹사이트에 자바스크립트를 더욱 손쉽게 활용할 수 있게 해주고, 짧고 단순한 코드로 웹페이지에
            다양한 효과나 연출을 적용할 수 있다. (자바스크립트의 단점을 한번 더 포장해주는 느낌)
            (자바스크립트를 도와주기 위한 서브코드)

        (2) https://jquery.com
            jQuery 공식 사이트

        (3) 사용 방법 
            1) 라이브러리를 다운로드 받아서 사용
                해당 파일 저장해서 <script src= .js>로 불러와서 사용 
            2) CDN 사용 
                다운받지 않고 인터넷으로 바로 연결해서 사용 (복사붙여넣기)
                <head> 에 바로 코드 넣어서 